type Account = record { owner : principal; subaccount : opt blob };
type BurnError = variant {
  GenericError : record { message : text; error_code : nat };
  NonExistingTokenId;
  InvalidBurn;
};
type BurnOk = record { result : BurnResult; token_id : nat };
type BurnResult = variant { Ok : nat; Err : BurnError };
type Engine = record {
  id : text;
  key : text;
  status : EngineStatus;
  title : text;
  owner : text;
  host : text;
  index : text;
};
type EngineStatus = variant { Draft; Published };
type Keys = record { public_key : text; slot : nat8; private_key : text };
type Proposal = record {
  reject_count : nat;
  voters : vec principal;
  proposal_summary : text;
  adopt_count : nat;
  dispute_type : bool;
  proposal_id : nat64;
  proposer : principal;
  cost_to_download : nat;
  mint_numbers : vec nat;
};
type ProposalWithVoteStatus = record { has_voted : bool; proposal : Proposal };
type Result = variant { Ok : Engine; Err : text };
type Result_1 = variant { Ok : BurnOk; Err : text };
type Result_10 = variant { Ok : vec record { nat; opt text }; Err : text };
type Result_11 = variant { Ok : nat; Err : text };
type Result_12 = variant { Ok : vec bool; Err : text };
type Result_13 = variant { Ok : vec opt Account; Err : text };
type Result_14 = variant { Ok : record { opt nat; opt nat }; Err : text };
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok : nat64; Err : text };
type Result_4 = variant { Ok; Err : text };
type Result_5 = variant { Ok : vec opt text; Err : text };
type Result_6 = variant { Ok : vec opt vec record { text; Value }; Err : text };
type Result_7 = variant { Ok : vec record { nat; TokenBalances }; Err : text };
type Result_8 = variant { Ok : vec TokenBalances; Err : text };
type Result_9 = variant { Ok : vec nat; Err : text };
type SourceCard = record {
  title : text;
  user_query : text;
  post_id : nat64;
  content : text;
  heading : text;
  author : text;
  summary : text;
  bookmarked : bool;
};
type TokenBalances = record { alex : nat; lbry : nat };
type Value = variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : vec Value;
};
service : () -> {
  add_engine : (text, text, text, text, text, opt nat8) -> (Engine);
  add_my_engine : (text, text, text, text, opt nat8) -> (Result);
  bookmark_sc : (nat64) -> ();
  burn_forever : (nat) -> (Result_1);
  burn_to_lbry : (vec nat) -> (Result_2);
  create_nft_proposal : (vec nat, text, nat, bool) -> (Result_3);
  delete_engine : (text) -> (bool);
  delete_keys : (nat8) -> (Result_4);
  delete_sc : (nat64) -> ();
  get_bookmarks : () -> (vec opt SourceCard) query;
  get_engine_by_id : (text) -> (opt Engine) query;
  get_engines : () -> (vec Engine) query;
  get_engines_by_owner : (text) -> (vec Engine) query;
  get_engines_not_owned_by : (text) -> (vec Engine) query;
  get_engines_not_owned_by_me : () -> (vec Engine) query;
  get_keys : () -> (vec Keys) query;
  get_librarian_keys : (principal) -> (vec Keys) query;
  get_manifest_ids : (vec nat) -> (Result_5);
  get_metadata : (vec nat) -> (Result_6);
  get_my_engines : () -> (vec Engine) query;
  get_my_nft_balances : (opt nat) -> (Result_7);
  get_nft_balances : (vec nat) -> (Result_8);
  get_nfts : (opt nat, opt nat) -> (Result_9);
  get_nfts_of : (principal) -> (Result_10);
  get_open_proposals : () -> (vec ProposalWithVoteStatus) query;
  get_sc : (nat64) -> (opt SourceCard) query;
  get_stake : (principal) -> (Result_11);
  is_verified : (vec nat) -> (Result_12);
  mint_nft : (text, nat) -> (Result_2);
  nfts_exist : (vec nat) -> (Result_12);
  owner_of : (vec nat) -> (Result_13);
  save_keys : (text, text, nat8) -> (Result_4);
  save_sc : (text, text, text, text, text, text) -> (nat64);
  settle_proposal : (nat64) -> ();
  total_supply : () -> (Result_11);
  update_engine_status : (text, nat8) -> (Result);
  verify_nfts : (vec nat, principal) -> (Result_2);
  vote_on_proposal : (nat64, bool) -> (Result_2);
  whoami : () -> (principal) query;
  withdraw : (nat) -> (Result_14);
}
