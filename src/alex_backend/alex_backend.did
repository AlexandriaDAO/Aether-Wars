type Engine = record {
  id : text;
  key : text;
  status : EngineStatus;
  title : text;
  owner : text;
  host : text;
  index : text;
};
type EngineStatus = variant { Draft; Published };
type Keys = record { public_key : text; slot : nat8; private_key : text };
type Result = variant { Ok : Engine; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok : text; Err : text };
type SourceCard = record {
  title : text;
  user_query : text;
  post_id : nat64;
  content : text;
  heading : text;
  author : text;
  summary : text;
  bookmarked : bool;
};
service : {
  add_engine : (text, text, text, text, text, opt nat8) -> (Engine);
  add_my_engine : (text, text, text, text, opt nat8) -> (Result);
  bookmark_sc : (nat64) -> ();
  delete_engine : (text) -> (bool);
  delete_keys : (nat8) -> (Result_3);
  delete_sc : (nat64) -> ();
  deploy_icrc7 : () -> (DeployResult);
  get_bookmarks : () -> (vec opt SourceCard) query;
  get_engine_by_id : (text) -> (opt Engine) query;
  get_engines : () -> (vec Engine) query;
  get_engines_by_owner : (text) -> (vec Engine) query;
  get_engines_not_owned_by : (text) -> (vec Engine) query;
  get_engines_not_owned_by_me : () -> (vec Engine) query;
  get_keys : () -> (vec Keys) query;
  get_librarian_keys : (principal) -> (vec Keys) query;
  get_my_engines : () -> (vec Engine) query;
  get_sc : (nat64) -> (opt SourceCard) query;
  initialize_icrc7 : () -> (DeployResult);
  mint_nft : (text) -> (Result_4);
  save_keys : (text, text, nat8) -> (DeployResult);
  save_sc : (text, text, text, text, text, text) -> (nat64);
  update_engine_status : (text, nat8) -> (Result);
  whoami : () -> (principal) query;
}
