// OG
use serde::Deserialize;
extern crate serde;

#[derive(Clone, Debug, candid::CandidType, serde::Deserialize)]
pub struct MessageCard {
    pub user_query: String,
    pub message: String,
}

#[ic_cdk::query]
fn mc_front(user_query: String) -> Option<MessageCard> {
    Some(MessageCard {
        user_query,
        message: "This is a response generated by a LLM using the results from the semantic search as input, and instructions to summarize.".to_string(),
    })
}




// mod weaviate;
// mod source_cards;

// use crate::source_cards::{SourceCard, SOURCE_CARDS, POST_ID_COUNTER};
// use std::sync::atomic::Ordering;

// #[ic_cdk_macros::update]
// pub fn save_source_card(user_query: String, title: String, heading: String, content: String) {
//     let post_id = POST_ID_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();
//     let card = SourceCard {
//         post_id: post_id.clone(),
//         user_query,
//         title,
//         heading,
//         content,
//     };
//     SOURCE_CARDS.with(|cards| cards.borrow_mut().insert(post_id, card));
// }

// #[ic_cdk_macros::query]
// fn get_source_card(post_id: String) -> Option<SourceCard> {
//     SOURCE_CARDS.with(|cards| cards.borrow().get(&post_id))
// }
